// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/user.proto

#include "proto/user.pb.h"
#include "proto/user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace user {

static const char* UserService_method_names[] = {
  "/user.UserService/RegisterUser",
  "/user.UserService/LinkTelegram",
  "/user.UserService/LoginPassAuth",
  "/user.UserService/TelegramAuth",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterUser_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinkTelegram_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginPassAuth_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TelegramAuth_(UserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::RegisterUser(::grpc::ClientContext* context, const ::user::RegisterUserRequest& request, ::user::RegisterUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::RegisterUserRequest, ::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::user::RegisterUserRequest* request, ::user::RegisterUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::RegisterUserRequest, ::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::user::RegisterUserRequest* request, ::user::RegisterUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::RegisterUserResponse>* UserService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::user::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::RegisterUserResponse, ::user::RegisterUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::RegisterUserResponse>* UserService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::user::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LinkTelegram(::grpc::ClientContext* context, const ::user::LinkTelegramRequest& request, ::user::LinkTelegramResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::LinkTelegramRequest, ::user::LinkTelegramResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LinkTelegram_, context, request, response);
}

void UserService::Stub::async::LinkTelegram(::grpc::ClientContext* context, const ::user::LinkTelegramRequest* request, ::user::LinkTelegramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::LinkTelegramRequest, ::user::LinkTelegramResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LinkTelegram_, context, request, response, std::move(f));
}

void UserService::Stub::async::LinkTelegram(::grpc::ClientContext* context, const ::user::LinkTelegramRequest* request, ::user::LinkTelegramResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LinkTelegram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::LinkTelegramResponse>* UserService::Stub::PrepareAsyncLinkTelegramRaw(::grpc::ClientContext* context, const ::user::LinkTelegramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::LinkTelegramResponse, ::user::LinkTelegramRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LinkTelegram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::LinkTelegramResponse>* UserService::Stub::AsyncLinkTelegramRaw(::grpc::ClientContext* context, const ::user::LinkTelegramRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLinkTelegramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LoginPassAuth(::grpc::ClientContext* context, const ::user::LoginPassAuthRequest& request, ::user::LoginPassAuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::LoginPassAuthRequest, ::user::LoginPassAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginPassAuth_, context, request, response);
}

void UserService::Stub::async::LoginPassAuth(::grpc::ClientContext* context, const ::user::LoginPassAuthRequest* request, ::user::LoginPassAuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::LoginPassAuthRequest, ::user::LoginPassAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginPassAuth_, context, request, response, std::move(f));
}

void UserService::Stub::async::LoginPassAuth(::grpc::ClientContext* context, const ::user::LoginPassAuthRequest* request, ::user::LoginPassAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginPassAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::LoginPassAuthResponse>* UserService::Stub::PrepareAsyncLoginPassAuthRaw(::grpc::ClientContext* context, const ::user::LoginPassAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::LoginPassAuthResponse, ::user::LoginPassAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginPassAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::LoginPassAuthResponse>* UserService::Stub::AsyncLoginPassAuthRaw(::grpc::ClientContext* context, const ::user::LoginPassAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginPassAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::TelegramAuth(::grpc::ClientContext* context, const ::user::TelegramAuthRequest& request, ::user::TelegramAuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::TelegramAuthRequest, ::user::TelegramAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TelegramAuth_, context, request, response);
}

void UserService::Stub::async::TelegramAuth(::grpc::ClientContext* context, const ::user::TelegramAuthRequest* request, ::user::TelegramAuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::TelegramAuthRequest, ::user::TelegramAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TelegramAuth_, context, request, response, std::move(f));
}

void UserService::Stub::async::TelegramAuth(::grpc::ClientContext* context, const ::user::TelegramAuthRequest* request, ::user::TelegramAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TelegramAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::TelegramAuthResponse>* UserService::Stub::PrepareAsyncTelegramAuthRaw(::grpc::ClientContext* context, const ::user::TelegramAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::TelegramAuthResponse, ::user::TelegramAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TelegramAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::TelegramAuthResponse>* UserService::Stub::AsyncTelegramAuthRaw(::grpc::ClientContext* context, const ::user::TelegramAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTelegramAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::RegisterUserRequest, ::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::RegisterUserRequest* req,
             ::user::RegisterUserResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::LinkTelegramRequest, ::user::LinkTelegramResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::LinkTelegramRequest* req,
             ::user::LinkTelegramResponse* resp) {
               return service->LinkTelegram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::LoginPassAuthRequest, ::user::LoginPassAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::LoginPassAuthRequest* req,
             ::user::LoginPassAuthResponse* resp) {
               return service->LoginPassAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::TelegramAuthRequest, ::user::TelegramAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::TelegramAuthRequest* req,
             ::user::TelegramAuthResponse* resp) {
               return service->TelegramAuth(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::RegisterUser(::grpc::ServerContext* context, const ::user::RegisterUserRequest* request, ::user::RegisterUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LinkTelegram(::grpc::ServerContext* context, const ::user::LinkTelegramRequest* request, ::user::LinkTelegramResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LoginPassAuth(::grpc::ServerContext* context, const ::user::LoginPassAuthRequest* request, ::user::LoginPassAuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::TelegramAuth(::grpc::ServerContext* context, const ::user::TelegramAuthRequest* request, ::user::TelegramAuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

