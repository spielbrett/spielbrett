// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/instance_host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2finstance_5fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2finstance_5fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2finstance_5fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2finstance_5fhost_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finstance_5fhost_2eproto;
namespace instance_host {
class CreateInstanceRequest;
struct CreateInstanceRequestDefaultTypeInternal;
extern CreateInstanceRequestDefaultTypeInternal _CreateInstanceRequest_default_instance_;
class CreateInstanceResponse;
struct CreateInstanceResponseDefaultTypeInternal;
extern CreateInstanceResponseDefaultTypeInternal _CreateInstanceResponse_default_instance_;
class PerformActionRequest;
struct PerformActionRequestDefaultTypeInternal;
extern PerformActionRequestDefaultTypeInternal _PerformActionRequest_default_instance_;
class PerformActionResponse;
struct PerformActionResponseDefaultTypeInternal;
extern PerformActionResponseDefaultTypeInternal _PerformActionResponse_default_instance_;
}  // namespace instance_host
PROTOBUF_NAMESPACE_OPEN
template<> ::instance_host::CreateInstanceRequest* Arena::CreateMaybeMessage<::instance_host::CreateInstanceRequest>(Arena*);
template<> ::instance_host::CreateInstanceResponse* Arena::CreateMaybeMessage<::instance_host::CreateInstanceResponse>(Arena*);
template<> ::instance_host::PerformActionRequest* Arena::CreateMaybeMessage<::instance_host::PerformActionRequest>(Arena*);
template<> ::instance_host::PerformActionResponse* Arena::CreateMaybeMessage<::instance_host::PerformActionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace instance_host {

// ===================================================================

class CreateInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instance_host.CreateInstanceRequest) */ {
 public:
  inline CreateInstanceRequest() : CreateInstanceRequest(nullptr) {}
  ~CreateInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceRequest(const CreateInstanceRequest& from);
  CreateInstanceRequest(CreateInstanceRequest&& from) noexcept
    : CreateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInstanceRequest& operator=(const CreateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceRequest& operator=(CreateInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceRequest*>(
               &_CreateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateInstanceRequest& a, CreateInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceRequest& from) {
    CreateInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instance_host.CreateInstanceRequest";
  }
  protected:
  explicit CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kInstanceTypeFieldNumber = 1,
  };
  // repeated string user_ids = 2 [json_name = "userIds"];
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string instance_type = 1 [json_name = "instanceType"];
  void clear_instance_type();
  const std::string& instance_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_type();
  PROTOBUF_NODISCARD std::string* release_instance_type();
  void set_allocated_instance_type(std::string* instance_type);
  private:
  const std::string& _internal_instance_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_type(const std::string& value);
  std::string* _internal_mutable_instance_type();
  public:

  // @@protoc_insertion_point(class_scope:instance_host.CreateInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2finstance_5fhost_2eproto;
};
// -------------------------------------------------------------------

class CreateInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instance_host.CreateInstanceResponse) */ {
 public:
  inline CreateInstanceResponse() : CreateInstanceResponse(nullptr) {}
  ~CreateInstanceResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceResponse(const CreateInstanceResponse& from);
  CreateInstanceResponse(CreateInstanceResponse&& from) noexcept
    : CreateInstanceResponse() {
    *this = ::std::move(from);
  }

  inline CreateInstanceResponse& operator=(const CreateInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceResponse& operator=(CreateInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceResponse*>(
               &_CreateInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInstanceResponse& a, CreateInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceResponse& from) {
    CreateInstanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instance_host.CreateInstanceResponse";
  }
  protected:
  explicit CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
  };
  // string instance_id = 1 [json_name = "instanceId"];
  void clear_instance_id();
  const std::string& instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_id();
  PROTOBUF_NODISCARD std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // @@protoc_insertion_point(class_scope:instance_host.CreateInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2finstance_5fhost_2eproto;
};
// -------------------------------------------------------------------

class PerformActionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instance_host.PerformActionRequest) */ {
 public:
  inline PerformActionRequest() : PerformActionRequest(nullptr) {}
  ~PerformActionRequest() override;
  explicit PROTOBUF_CONSTEXPR PerformActionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformActionRequest(const PerformActionRequest& from);
  PerformActionRequest(PerformActionRequest&& from) noexcept
    : PerformActionRequest() {
    *this = ::std::move(from);
  }

  inline PerformActionRequest& operator=(const PerformActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformActionRequest& operator=(PerformActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformActionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformActionRequest* internal_default_instance() {
    return reinterpret_cast<const PerformActionRequest*>(
               &_PerformActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerformActionRequest& a, PerformActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformActionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerformActionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerformActionRequest& from) {
    PerformActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformActionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instance_host.PerformActionRequest";
  }
  protected:
  explicit PerformActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kInstanceIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kActionNameFieldNumber = 3,
  };
  // repeated .google.protobuf.Any payload = 4 [json_name = "payload"];
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_payload(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_payload();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_payload(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_payload();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& payload(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_payload();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      payload() const;

  // string instance_id = 1 [json_name = "instanceId"];
  void clear_instance_id();
  const std::string& instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_id();
  PROTOBUF_NODISCARD std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string action_name = 3 [json_name = "actionName"];
  void clear_action_name();
  const std::string& action_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_name();
  PROTOBUF_NODISCARD std::string* release_action_name();
  void set_allocated_action_name(std::string* action_name);
  private:
  const std::string& _internal_action_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_name(const std::string& value);
  std::string* _internal_mutable_action_name();
  public:

  // @@protoc_insertion_point(class_scope:instance_host.PerformActionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2finstance_5fhost_2eproto;
};
// -------------------------------------------------------------------

class PerformActionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:instance_host.PerformActionResponse) */ {
 public:
  inline PerformActionResponse() : PerformActionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PerformActionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformActionResponse(const PerformActionResponse& from);
  PerformActionResponse(PerformActionResponse&& from) noexcept
    : PerformActionResponse() {
    *this = ::std::move(from);
  }

  inline PerformActionResponse& operator=(const PerformActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformActionResponse& operator=(PerformActionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformActionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformActionResponse* internal_default_instance() {
    return reinterpret_cast<const PerformActionResponse*>(
               &_PerformActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerformActionResponse& a, PerformActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformActionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformActionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerformActionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerformActionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PerformActionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PerformActionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instance_host.PerformActionResponse";
  }
  protected:
  explicit PerformActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:instance_host.PerformActionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_proto_2finstance_5fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateInstanceRequest

// string instance_type = 1 [json_name = "instanceType"];
inline void CreateInstanceRequest::clear_instance_type() {
  _impl_.instance_type_.ClearToEmpty();
}
inline const std::string& CreateInstanceRequest::instance_type() const {
  // @@protoc_insertion_point(field_get:instance_host.CreateInstanceRequest.instance_type)
  return _internal_instance_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceRequest::set_instance_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:instance_host.CreateInstanceRequest.instance_type)
}
inline std::string* CreateInstanceRequest::mutable_instance_type() {
  std::string* _s = _internal_mutable_instance_type();
  // @@protoc_insertion_point(field_mutable:instance_host.CreateInstanceRequest.instance_type)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_instance_type() const {
  return _impl_.instance_type_.Get();
}
inline void CreateInstanceRequest::_internal_set_instance_type(const std::string& value) {
  
  _impl_.instance_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::_internal_mutable_instance_type() {
  
  return _impl_.instance_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::release_instance_type() {
  // @@protoc_insertion_point(field_release:instance_host.CreateInstanceRequest.instance_type)
  return _impl_.instance_type_.Release();
}
inline void CreateInstanceRequest::set_allocated_instance_type(std::string* instance_type) {
  if (instance_type != nullptr) {
    
  } else {
    
  }
  _impl_.instance_type_.SetAllocated(instance_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_type_.IsDefault()) {
    _impl_.instance_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:instance_host.CreateInstanceRequest.instance_type)
}

// repeated string user_ids = 2 [json_name = "userIds"];
inline int CreateInstanceRequest::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int CreateInstanceRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void CreateInstanceRequest::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline std::string* CreateInstanceRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:instance_host.CreateInstanceRequest.user_ids)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline const std::string& CreateInstanceRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:instance_host.CreateInstanceRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* CreateInstanceRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:instance_host.CreateInstanceRequest.user_ids)
  return _impl_.user_ids_.Mutable(index);
}
inline void CreateInstanceRequest::set_user_ids(int index, const std::string& value) {
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::set_user_ids(int index, std::string&& value) {
  _impl_.user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::set_user_ids(int index, const char* value, size_t size) {
  _impl_.user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:instance_host.CreateInstanceRequest.user_ids)
}
inline std::string* CreateInstanceRequest::_internal_add_user_ids() {
  return _impl_.user_ids_.Add();
}
inline void CreateInstanceRequest::add_user_ids(const std::string& value) {
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::add_user_ids(std::string&& value) {
  _impl_.user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:instance_host.CreateInstanceRequest.user_ids)
}
inline void CreateInstanceRequest::add_user_ids(const char* value, size_t size) {
  _impl_.user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:instance_host.CreateInstanceRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateInstanceRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:instance_host.CreateInstanceRequest.user_ids)
  return _impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateInstanceRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:instance_host.CreateInstanceRequest.user_ids)
  return &_impl_.user_ids_;
}

// -------------------------------------------------------------------

// CreateInstanceResponse

// string instance_id = 1 [json_name = "instanceId"];
inline void CreateInstanceResponse::clear_instance_id() {
  _impl_.instance_id_.ClearToEmpty();
}
inline const std::string& CreateInstanceResponse::instance_id() const {
  // @@protoc_insertion_point(field_get:instance_host.CreateInstanceResponse.instance_id)
  return _internal_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceResponse::set_instance_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:instance_host.CreateInstanceResponse.instance_id)
}
inline std::string* CreateInstanceResponse::mutable_instance_id() {
  std::string* _s = _internal_mutable_instance_id();
  // @@protoc_insertion_point(field_mutable:instance_host.CreateInstanceResponse.instance_id)
  return _s;
}
inline const std::string& CreateInstanceResponse::_internal_instance_id() const {
  return _impl_.instance_id_.Get();
}
inline void CreateInstanceResponse::_internal_set_instance_id(const std::string& value) {
  
  _impl_.instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::_internal_mutable_instance_id() {
  
  return _impl_.instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::release_instance_id() {
  // @@protoc_insertion_point(field_release:instance_host.CreateInstanceResponse.instance_id)
  return _impl_.instance_id_.Release();
}
inline void CreateInstanceResponse::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  _impl_.instance_id_.SetAllocated(instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_id_.IsDefault()) {
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:instance_host.CreateInstanceResponse.instance_id)
}

// -------------------------------------------------------------------

// PerformActionRequest

// string instance_id = 1 [json_name = "instanceId"];
inline void PerformActionRequest::clear_instance_id() {
  _impl_.instance_id_.ClearToEmpty();
}
inline const std::string& PerformActionRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:instance_host.PerformActionRequest.instance_id)
  return _internal_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformActionRequest::set_instance_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:instance_host.PerformActionRequest.instance_id)
}
inline std::string* PerformActionRequest::mutable_instance_id() {
  std::string* _s = _internal_mutable_instance_id();
  // @@protoc_insertion_point(field_mutable:instance_host.PerformActionRequest.instance_id)
  return _s;
}
inline const std::string& PerformActionRequest::_internal_instance_id() const {
  return _impl_.instance_id_.Get();
}
inline void PerformActionRequest::_internal_set_instance_id(const std::string& value) {
  
  _impl_.instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformActionRequest::_internal_mutable_instance_id() {
  
  return _impl_.instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformActionRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:instance_host.PerformActionRequest.instance_id)
  return _impl_.instance_id_.Release();
}
inline void PerformActionRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  _impl_.instance_id_.SetAllocated(instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_id_.IsDefault()) {
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:instance_host.PerformActionRequest.instance_id)
}

// string user_id = 2 [json_name = "userId"];
inline void PerformActionRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& PerformActionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:instance_host.PerformActionRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformActionRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:instance_host.PerformActionRequest.user_id)
}
inline std::string* PerformActionRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:instance_host.PerformActionRequest.user_id)
  return _s;
}
inline const std::string& PerformActionRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void PerformActionRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformActionRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformActionRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:instance_host.PerformActionRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void PerformActionRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:instance_host.PerformActionRequest.user_id)
}

// string action_name = 3 [json_name = "actionName"];
inline void PerformActionRequest::clear_action_name() {
  _impl_.action_name_.ClearToEmpty();
}
inline const std::string& PerformActionRequest::action_name() const {
  // @@protoc_insertion_point(field_get:instance_host.PerformActionRequest.action_name)
  return _internal_action_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerformActionRequest::set_action_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:instance_host.PerformActionRequest.action_name)
}
inline std::string* PerformActionRequest::mutable_action_name() {
  std::string* _s = _internal_mutable_action_name();
  // @@protoc_insertion_point(field_mutable:instance_host.PerformActionRequest.action_name)
  return _s;
}
inline const std::string& PerformActionRequest::_internal_action_name() const {
  return _impl_.action_name_.Get();
}
inline void PerformActionRequest::_internal_set_action_name(const std::string& value) {
  
  _impl_.action_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PerformActionRequest::_internal_mutable_action_name() {
  
  return _impl_.action_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PerformActionRequest::release_action_name() {
  // @@protoc_insertion_point(field_release:instance_host.PerformActionRequest.action_name)
  return _impl_.action_name_.Release();
}
inline void PerformActionRequest::set_allocated_action_name(std::string* action_name) {
  if (action_name != nullptr) {
    
  } else {
    
  }
  _impl_.action_name_.SetAllocated(action_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_name_.IsDefault()) {
    _impl_.action_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:instance_host.PerformActionRequest.action_name)
}

// repeated .google.protobuf.Any payload = 4 [json_name = "payload"];
inline int PerformActionRequest::_internal_payload_size() const {
  return _impl_.payload_.size();
}
inline int PerformActionRequest::payload_size() const {
  return _internal_payload_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* PerformActionRequest::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:instance_host.PerformActionRequest.payload)
  return _impl_.payload_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
PerformActionRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:instance_host.PerformActionRequest.payload)
  return &_impl_.payload_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& PerformActionRequest::_internal_payload(int index) const {
  return _impl_.payload_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& PerformActionRequest::payload(int index) const {
  // @@protoc_insertion_point(field_get:instance_host.PerformActionRequest.payload)
  return _internal_payload(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* PerformActionRequest::_internal_add_payload() {
  return _impl_.payload_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* PerformActionRequest::add_payload() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_payload();
  // @@protoc_insertion_point(field_add:instance_host.PerformActionRequest.payload)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
PerformActionRequest::payload() const {
  // @@protoc_insertion_point(field_list:instance_host.PerformActionRequest.payload)
  return _impl_.payload_;
}

// -------------------------------------------------------------------

// PerformActionResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instance_host

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2finstance_5fhost_2eproto
