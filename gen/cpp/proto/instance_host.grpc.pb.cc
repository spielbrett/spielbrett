// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/instance_host.proto

#include "proto/instance_host.pb.h"
#include "proto/instance_host.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace instance_host {

static const char* InstanceHostService_method_names[] = {
  "/instance_host.InstanceHostService/CreateInstance",
  "/instance_host.InstanceHostService/TriggerEvent",
};

std::unique_ptr< InstanceHostService::Stub> InstanceHostService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InstanceHostService::Stub> stub(new InstanceHostService::Stub(channel, options));
  return stub;
}

InstanceHostService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateInstance_(InstanceHostService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerEvent_(InstanceHostService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InstanceHostService::Stub::CreateInstance(::grpc::ClientContext* context, const ::instance_host::CreateInstanceRequest& request, ::instance_host::CreateInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::instance_host::CreateInstanceRequest, ::instance_host::CreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInstance_, context, request, response);
}

void InstanceHostService::Stub::async::CreateInstance(::grpc::ClientContext* context, const ::instance_host::CreateInstanceRequest* request, ::instance_host::CreateInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::instance_host::CreateInstanceRequest, ::instance_host::CreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInstance_, context, request, response, std::move(f));
}

void InstanceHostService::Stub::async::CreateInstance(::grpc::ClientContext* context, const ::instance_host::CreateInstanceRequest* request, ::instance_host::CreateInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::instance_host::CreateInstanceResponse>* InstanceHostService::Stub::PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::instance_host::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::instance_host::CreateInstanceResponse, ::instance_host::CreateInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::instance_host::CreateInstanceResponse>* InstanceHostService::Stub::AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::instance_host::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceHostService::Stub::TriggerEvent(::grpc::ClientContext* context, const ::instance_host::TriggerEventRequest& request, ::instance_host::TriggerEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::instance_host::TriggerEventRequest, ::instance_host::TriggerEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerEvent_, context, request, response);
}

void InstanceHostService::Stub::async::TriggerEvent(::grpc::ClientContext* context, const ::instance_host::TriggerEventRequest* request, ::instance_host::TriggerEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::instance_host::TriggerEventRequest, ::instance_host::TriggerEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerEvent_, context, request, response, std::move(f));
}

void InstanceHostService::Stub::async::TriggerEvent(::grpc::ClientContext* context, const ::instance_host::TriggerEventRequest* request, ::instance_host::TriggerEventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::instance_host::TriggerEventResponse>* InstanceHostService::Stub::PrepareAsyncTriggerEventRaw(::grpc::ClientContext* context, const ::instance_host::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::instance_host::TriggerEventResponse, ::instance_host::TriggerEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::instance_host::TriggerEventResponse>* InstanceHostService::Stub::AsyncTriggerEventRaw(::grpc::ClientContext* context, const ::instance_host::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

InstanceHostService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceHostService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceHostService::Service, ::instance_host::CreateInstanceRequest, ::instance_host::CreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceHostService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::instance_host::CreateInstanceRequest* req,
             ::instance_host::CreateInstanceResponse* resp) {
               return service->CreateInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceHostService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceHostService::Service, ::instance_host::TriggerEventRequest, ::instance_host::TriggerEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceHostService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::instance_host::TriggerEventRequest* req,
             ::instance_host::TriggerEventResponse* resp) {
               return service->TriggerEvent(ctx, req, resp);
             }, this)));
}

InstanceHostService::Service::~Service() {
}

::grpc::Status InstanceHostService::Service::CreateInstance(::grpc::ServerContext* context, const ::instance_host::CreateInstanceRequest* request, ::instance_host::CreateInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceHostService::Service::TriggerEvent(::grpc::ServerContext* context, const ::instance_host::TriggerEventRequest* request, ::instance_host::TriggerEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace instance_host

