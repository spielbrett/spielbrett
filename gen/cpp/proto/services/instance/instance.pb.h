// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/instance/instance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2finstance_2finstance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2finstance_2finstance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2finstance_2finstance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fservices_2finstance_2finstance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservices_2finstance_2finstance_2eproto;
namespace spielbrett {
namespace services {
namespace instance {
class CreateInstanceRequest;
struct CreateInstanceRequestDefaultTypeInternal;
extern CreateInstanceRequestDefaultTypeInternal _CreateInstanceRequest_default_instance_;
class CreateInstanceResponse;
struct CreateInstanceResponseDefaultTypeInternal;
extern CreateInstanceResponseDefaultTypeInternal _CreateInstanceResponse_default_instance_;
}  // namespace instance
}  // namespace services
}  // namespace spielbrett
PROTOBUF_NAMESPACE_OPEN
template<> ::spielbrett::services::instance::CreateInstanceRequest* Arena::CreateMaybeMessage<::spielbrett::services::instance::CreateInstanceRequest>(Arena*);
template<> ::spielbrett::services::instance::CreateInstanceResponse* Arena::CreateMaybeMessage<::spielbrett::services::instance::CreateInstanceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spielbrett {
namespace services {
namespace instance {

// ===================================================================

class CreateInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spielbrett.services.instance.CreateInstanceRequest) */ {
 public:
  inline CreateInstanceRequest() : CreateInstanceRequest(nullptr) {}
  ~CreateInstanceRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceRequest(const CreateInstanceRequest& from);
  CreateInstanceRequest(CreateInstanceRequest&& from) noexcept
    : CreateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInstanceRequest& operator=(const CreateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceRequest& operator=(CreateInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceRequest*>(
               &_CreateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateInstanceRequest& a, CreateInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceRequest& from) {
    CreateInstanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spielbrett.services.instance.CreateInstanceRequest";
  }
  protected:
  explicit CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kInstanceTypeFieldNumber = 2,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string instance_type = 2 [json_name = "instanceType"];
  void clear_instance_type();
  const std::string& instance_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_type();
  PROTOBUF_NODISCARD std::string* release_instance_type();
  void set_allocated_instance_type(std::string* instance_type);
  private:
  const std::string& _internal_instance_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_type(const std::string& value);
  std::string* _internal_mutable_instance_type();
  public:

  // @@protoc_insertion_point(class_scope:spielbrett.services.instance.CreateInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2finstance_2finstance_2eproto;
};
// -------------------------------------------------------------------

class CreateInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spielbrett.services.instance.CreateInstanceResponse) */ {
 public:
  inline CreateInstanceResponse() : CreateInstanceResponse(nullptr) {}
  ~CreateInstanceResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceResponse(const CreateInstanceResponse& from);
  CreateInstanceResponse(CreateInstanceResponse&& from) noexcept
    : CreateInstanceResponse() {
    *this = ::std::move(from);
  }

  inline CreateInstanceResponse& operator=(const CreateInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceResponse& operator=(CreateInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceResponse*>(
               &_CreateInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInstanceResponse& a, CreateInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateInstanceResponse& from) {
    CreateInstanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spielbrett.services.instance.CreateInstanceResponse";
  }
  protected:
  explicit CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kEndpointFieldNumber = 2,
  };
  // string instance_id = 1 [json_name = "instanceId"];
  void clear_instance_id();
  const std::string& instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_id();
  PROTOBUF_NODISCARD std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string endpoint = 2 [json_name = "endpoint"];
  void clear_endpoint();
  const std::string& endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:spielbrett.services.instance.CreateInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2finstance_2finstance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateInstanceRequest

// string session_id = 1 [json_name = "sessionId"];
inline void CreateInstanceRequest::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& CreateInstanceRequest::session_id() const {
  // @@protoc_insertion_point(field_get:spielbrett.services.instance.CreateInstanceRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spielbrett.services.instance.CreateInstanceRequest.session_id)
}
inline std::string* CreateInstanceRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.instance.CreateInstanceRequest.session_id)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void CreateInstanceRequest::_internal_set_session_id(const std::string& value) {
  
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::_internal_mutable_session_id() {
  
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:spielbrett.services.instance.CreateInstanceRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void CreateInstanceRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.instance.CreateInstanceRequest.session_id)
}

// string instance_type = 2 [json_name = "instanceType"];
inline void CreateInstanceRequest::clear_instance_type() {
  _impl_.instance_type_.ClearToEmpty();
}
inline const std::string& CreateInstanceRequest::instance_type() const {
  // @@protoc_insertion_point(field_get:spielbrett.services.instance.CreateInstanceRequest.instance_type)
  return _internal_instance_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceRequest::set_instance_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spielbrett.services.instance.CreateInstanceRequest.instance_type)
}
inline std::string* CreateInstanceRequest::mutable_instance_type() {
  std::string* _s = _internal_mutable_instance_type();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.instance.CreateInstanceRequest.instance_type)
  return _s;
}
inline const std::string& CreateInstanceRequest::_internal_instance_type() const {
  return _impl_.instance_type_.Get();
}
inline void CreateInstanceRequest::_internal_set_instance_type(const std::string& value) {
  
  _impl_.instance_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::_internal_mutable_instance_type() {
  
  return _impl_.instance_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceRequest::release_instance_type() {
  // @@protoc_insertion_point(field_release:spielbrett.services.instance.CreateInstanceRequest.instance_type)
  return _impl_.instance_type_.Release();
}
inline void CreateInstanceRequest::set_allocated_instance_type(std::string* instance_type) {
  if (instance_type != nullptr) {
    
  } else {
    
  }
  _impl_.instance_type_.SetAllocated(instance_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_type_.IsDefault()) {
    _impl_.instance_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.instance.CreateInstanceRequest.instance_type)
}

// -------------------------------------------------------------------

// CreateInstanceResponse

// string instance_id = 1 [json_name = "instanceId"];
inline void CreateInstanceResponse::clear_instance_id() {
  _impl_.instance_id_.ClearToEmpty();
}
inline const std::string& CreateInstanceResponse::instance_id() const {
  // @@protoc_insertion_point(field_get:spielbrett.services.instance.CreateInstanceResponse.instance_id)
  return _internal_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceResponse::set_instance_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spielbrett.services.instance.CreateInstanceResponse.instance_id)
}
inline std::string* CreateInstanceResponse::mutable_instance_id() {
  std::string* _s = _internal_mutable_instance_id();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.instance.CreateInstanceResponse.instance_id)
  return _s;
}
inline const std::string& CreateInstanceResponse::_internal_instance_id() const {
  return _impl_.instance_id_.Get();
}
inline void CreateInstanceResponse::_internal_set_instance_id(const std::string& value) {
  
  _impl_.instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::_internal_mutable_instance_id() {
  
  return _impl_.instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::release_instance_id() {
  // @@protoc_insertion_point(field_release:spielbrett.services.instance.CreateInstanceResponse.instance_id)
  return _impl_.instance_id_.Release();
}
inline void CreateInstanceResponse::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  _impl_.instance_id_.SetAllocated(instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_id_.IsDefault()) {
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.instance.CreateInstanceResponse.instance_id)
}

// string endpoint = 2 [json_name = "endpoint"];
inline void CreateInstanceResponse::clear_endpoint() {
  _impl_.endpoint_.ClearToEmpty();
}
inline const std::string& CreateInstanceResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:spielbrett.services.instance.CreateInstanceResponse.endpoint)
  return _internal_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceResponse::set_endpoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spielbrett.services.instance.CreateInstanceResponse.endpoint)
}
inline std::string* CreateInstanceResponse::mutable_endpoint() {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.instance.CreateInstanceResponse.endpoint)
  return _s;
}
inline const std::string& CreateInstanceResponse::_internal_endpoint() const {
  return _impl_.endpoint_.Get();
}
inline void CreateInstanceResponse::_internal_set_endpoint(const std::string& value) {
  
  _impl_.endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::_internal_mutable_endpoint() {
  
  return _impl_.endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:spielbrett.services.instance.CreateInstanceResponse.endpoint)
  return _impl_.endpoint_.Release();
}
inline void CreateInstanceResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  _impl_.endpoint_.SetAllocated(endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.instance.CreateInstanceResponse.endpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instance
}  // namespace services
}  // namespace spielbrett

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2finstance_2finstance_2eproto
