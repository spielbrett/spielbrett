// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package instance_host

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceHostServiceClient is the client API for InstanceHostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceHostServiceClient interface {
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	PerformAction(ctx context.Context, in *PerformActionRequest, opts ...grpc.CallOption) (*PerformActionResponse, error)
}

type instanceHostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceHostServiceClient(cc grpc.ClientConnInterface) InstanceHostServiceClient {
	return &instanceHostServiceClient{cc}
}

func (c *instanceHostServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, "/spielbrett.services.instance_host.InstanceHostService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceHostServiceClient) PerformAction(ctx context.Context, in *PerformActionRequest, opts ...grpc.CallOption) (*PerformActionResponse, error) {
	out := new(PerformActionResponse)
	err := c.cc.Invoke(ctx, "/spielbrett.services.instance_host.InstanceHostService/PerformAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceHostServiceServer is the server API for InstanceHostService service.
// All implementations must embed UnimplementedInstanceHostServiceServer
// for forward compatibility
type InstanceHostServiceServer interface {
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	PerformAction(context.Context, *PerformActionRequest) (*PerformActionResponse, error)
	mustEmbedUnimplementedInstanceHostServiceServer()
}

// UnimplementedInstanceHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceHostServiceServer struct {
}

func (UnimplementedInstanceHostServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedInstanceHostServiceServer) PerformAction(context.Context, *PerformActionRequest) (*PerformActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAction not implemented")
}
func (UnimplementedInstanceHostServiceServer) mustEmbedUnimplementedInstanceHostServiceServer() {}

// UnsafeInstanceHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceHostServiceServer will
// result in compilation errors.
type UnsafeInstanceHostServiceServer interface {
	mustEmbedUnimplementedInstanceHostServiceServer()
}

func RegisterInstanceHostServiceServer(s grpc.ServiceRegistrar, srv InstanceHostServiceServer) {
	s.RegisterService(&InstanceHostService_ServiceDesc, srv)
}

func _InstanceHostService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceHostServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spielbrett.services.instance_host.InstanceHostService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceHostServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceHostService_PerformAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceHostServiceServer).PerformAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spielbrett.services.instance_host.InstanceHostService/PerformAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceHostServiceServer).PerformAction(ctx, req.(*PerformActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceHostService_ServiceDesc is the grpc.ServiceDesc for InstanceHostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceHostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spielbrett.services.instance_host.InstanceHostService",
	HandlerType: (*InstanceHostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _InstanceHostService_CreateInstance_Handler,
		},
		{
			MethodName: "PerformAction",
			Handler:    _InstanceHostService_PerformAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/instance_host/instance_host.proto",
}
