// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/services/user/user.proto
// Protobuf C++ Version: 5.29.3

#ifndef proto_2fservices_2fuser_2fuser_2eproto_2epb_2eh
#define proto_2fservices_2fuser_2fuser_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2fuser_2fuser_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fservices_2fuser_2fuser_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fservices_2fuser_2fuser_2eproto;
namespace spielbrett {
namespace services {
namespace user {
class LinkTelegramRequest;
struct LinkTelegramRequestDefaultTypeInternal;
extern LinkTelegramRequestDefaultTypeInternal _LinkTelegramRequest_default_instance_;
class LinkTelegramResponse;
struct LinkTelegramResponseDefaultTypeInternal;
extern LinkTelegramResponseDefaultTypeInternal _LinkTelegramResponse_default_instance_;
class LoginPassAuthRequest;
struct LoginPassAuthRequestDefaultTypeInternal;
extern LoginPassAuthRequestDefaultTypeInternal _LoginPassAuthRequest_default_instance_;
class LoginPassAuthResponse;
struct LoginPassAuthResponseDefaultTypeInternal;
extern LoginPassAuthResponseDefaultTypeInternal _LoginPassAuthResponse_default_instance_;
class RegisterUserRequest;
struct RegisterUserRequestDefaultTypeInternal;
extern RegisterUserRequestDefaultTypeInternal _RegisterUserRequest_default_instance_;
class RegisterUserResponse;
struct RegisterUserResponseDefaultTypeInternal;
extern RegisterUserResponseDefaultTypeInternal _RegisterUserResponse_default_instance_;
class TelegramAuthRequest;
struct TelegramAuthRequestDefaultTypeInternal;
extern TelegramAuthRequestDefaultTypeInternal _TelegramAuthRequest_default_instance_;
class TelegramAuthResponse;
struct TelegramAuthResponseDefaultTypeInternal;
extern TelegramAuthResponseDefaultTypeInternal _TelegramAuthResponse_default_instance_;
}  // namespace user
}  // namespace services
}  // namespace spielbrett
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace spielbrett {
namespace services {
namespace user {

// ===================================================================


// -------------------------------------------------------------------

class TelegramAuthResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.TelegramAuthResponse) */ {
 public:
  inline TelegramAuthResponse() : TelegramAuthResponse(nullptr) {}
  ~TelegramAuthResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TelegramAuthResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TelegramAuthResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TelegramAuthResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TelegramAuthResponse(const TelegramAuthResponse& from) : TelegramAuthResponse(nullptr, from) {}
  inline TelegramAuthResponse(TelegramAuthResponse&& from) noexcept
      : TelegramAuthResponse(nullptr, std::move(from)) {}
  inline TelegramAuthResponse& operator=(const TelegramAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelegramAuthResponse& operator=(TelegramAuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelegramAuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelegramAuthResponse* internal_default_instance() {
    return reinterpret_cast<const TelegramAuthResponse*>(
        &_TelegramAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TelegramAuthResponse& a, TelegramAuthResponse& b) { a.Swap(&b); }
  inline void Swap(TelegramAuthResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelegramAuthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelegramAuthResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TelegramAuthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TelegramAuthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TelegramAuthResponse& from) { TelegramAuthResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TelegramAuthResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.TelegramAuthResponse"; }

 protected:
  explicit TelegramAuthResponse(::google::protobuf::Arena* arena);
  TelegramAuthResponse(::google::protobuf::Arena* arena, const TelegramAuthResponse& from);
  TelegramAuthResponse(::google::protobuf::Arena* arena, TelegramAuthResponse&& from) noexcept
      : TelegramAuthResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.TelegramAuthResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TelegramAuthResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class TelegramAuthRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.TelegramAuthRequest) */ {
 public:
  inline TelegramAuthRequest() : TelegramAuthRequest(nullptr) {}
  ~TelegramAuthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TelegramAuthRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TelegramAuthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TelegramAuthRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TelegramAuthRequest(const TelegramAuthRequest& from) : TelegramAuthRequest(nullptr, from) {}
  inline TelegramAuthRequest(TelegramAuthRequest&& from) noexcept
      : TelegramAuthRequest(nullptr, std::move(from)) {}
  inline TelegramAuthRequest& operator=(const TelegramAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelegramAuthRequest& operator=(TelegramAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelegramAuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelegramAuthRequest* internal_default_instance() {
    return reinterpret_cast<const TelegramAuthRequest*>(
        &_TelegramAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TelegramAuthRequest& a, TelegramAuthRequest& b) { a.Swap(&b); }
  inline void Swap(TelegramAuthRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelegramAuthRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelegramAuthRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TelegramAuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TelegramAuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TelegramAuthRequest& from) { TelegramAuthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TelegramAuthRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.TelegramAuthRequest"; }

 protected:
  explicit TelegramAuthRequest(::google::protobuf::Arena* arena);
  TelegramAuthRequest(::google::protobuf::Arena* arena, const TelegramAuthRequest& from);
  TelegramAuthRequest(::google::protobuf::Arena* arena, TelegramAuthRequest&& from) noexcept
      : TelegramAuthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWebAppInitDataFieldNumber = 1,
  };
  // string web_app_init_data = 1 [json_name = "webAppInitData"];
  void clear_web_app_init_data() ;
  const std::string& web_app_init_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_web_app_init_data(Arg_&& arg, Args_... args);
  std::string* mutable_web_app_init_data();
  PROTOBUF_NODISCARD std::string* release_web_app_init_data();
  void set_allocated_web_app_init_data(std::string* value);

  private:
  const std::string& _internal_web_app_init_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_web_app_init_data(
      const std::string& value);
  std::string* _internal_mutable_web_app_init_data();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.TelegramAuthRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TelegramAuthRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr web_app_init_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class RegisterUserResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.RegisterUserResponse) */ {
 public:
  inline RegisterUserResponse() : RegisterUserResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterUserResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterUserResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterUserResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterUserResponse(const RegisterUserResponse& from) : RegisterUserResponse(nullptr, from) {}
  inline RegisterUserResponse(RegisterUserResponse&& from) noexcept
      : RegisterUserResponse(nullptr, std::move(from)) {}
  inline RegisterUserResponse& operator=(const RegisterUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUserResponse& operator=(RegisterUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUserResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterUserResponse*>(
        &_RegisterUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RegisterUserResponse& a, RegisterUserResponse& b) { a.Swap(&b); }
  inline void Swap(RegisterUserResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterUserResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RegisterUserResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RegisterUserResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RegisterUserResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.RegisterUserResponse"; }

 protected:
  explicit RegisterUserResponse(::google::protobuf::Arena* arena);
  RegisterUserResponse(::google::protobuf::Arena* arena, const RegisterUserResponse& from);
  RegisterUserResponse(::google::protobuf::Arena* arena, RegisterUserResponse&& from) noexcept
      : RegisterUserResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.RegisterUserResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterUserResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class RegisterUserRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.RegisterUserRequest) */ {
 public:
  inline RegisterUserRequest() : RegisterUserRequest(nullptr) {}
  ~RegisterUserRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterUserRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterUserRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterUserRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterUserRequest(const RegisterUserRequest& from) : RegisterUserRequest(nullptr, from) {}
  inline RegisterUserRequest(RegisterUserRequest&& from) noexcept
      : RegisterUserRequest(nullptr, std::move(from)) {}
  inline RegisterUserRequest& operator=(const RegisterUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUserRequest& operator=(RegisterUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUserRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterUserRequest*>(
        &_RegisterUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RegisterUserRequest& a, RegisterUserRequest& b) { a.Swap(&b); }
  inline void Swap(RegisterUserRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterUserRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterUserRequest& from) { RegisterUserRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterUserRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.RegisterUserRequest"; }

 protected:
  explicit RegisterUserRequest(::google::protobuf::Arena* arena);
  RegisterUserRequest(::google::protobuf::Arena* arena, const RegisterUserRequest& from);
  RegisterUserRequest(::google::protobuf::Arena* arena, RegisterUserRequest&& from) noexcept
      : RegisterUserRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1 [json_name = "login"];
  void clear_login() ;
  const std::string& login() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_login(Arg_&& arg, Args_... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* value);

  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(
      const std::string& value);
  std::string* _internal_mutable_login();

  public:
  // string password = 2 [json_name = "password"];
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.RegisterUserRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterUserRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr login_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class LoginPassAuthResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.LoginPassAuthResponse) */ {
 public:
  inline LoginPassAuthResponse() : LoginPassAuthResponse(nullptr) {}
  ~LoginPassAuthResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LoginPassAuthResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LoginPassAuthResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginPassAuthResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginPassAuthResponse(const LoginPassAuthResponse& from) : LoginPassAuthResponse(nullptr, from) {}
  inline LoginPassAuthResponse(LoginPassAuthResponse&& from) noexcept
      : LoginPassAuthResponse(nullptr, std::move(from)) {}
  inline LoginPassAuthResponse& operator=(const LoginPassAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPassAuthResponse& operator=(LoginPassAuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginPassAuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginPassAuthResponse* internal_default_instance() {
    return reinterpret_cast<const LoginPassAuthResponse*>(
        &_LoginPassAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(LoginPassAuthResponse& a, LoginPassAuthResponse& b) { a.Swap(&b); }
  inline void Swap(LoginPassAuthResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginPassAuthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginPassAuthResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LoginPassAuthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginPassAuthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginPassAuthResponse& from) { LoginPassAuthResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LoginPassAuthResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.LoginPassAuthResponse"; }

 protected:
  explicit LoginPassAuthResponse(::google::protobuf::Arena* arena);
  LoginPassAuthResponse(::google::protobuf::Arena* arena, const LoginPassAuthResponse& from);
  LoginPassAuthResponse(::google::protobuf::Arena* arena, LoginPassAuthResponse&& from) noexcept
      : LoginPassAuthResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.LoginPassAuthResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginPassAuthResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class LoginPassAuthRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.LoginPassAuthRequest) */ {
 public:
  inline LoginPassAuthRequest() : LoginPassAuthRequest(nullptr) {}
  ~LoginPassAuthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LoginPassAuthRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LoginPassAuthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginPassAuthRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginPassAuthRequest(const LoginPassAuthRequest& from) : LoginPassAuthRequest(nullptr, from) {}
  inline LoginPassAuthRequest(LoginPassAuthRequest&& from) noexcept
      : LoginPassAuthRequest(nullptr, std::move(from)) {}
  inline LoginPassAuthRequest& operator=(const LoginPassAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPassAuthRequest& operator=(LoginPassAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginPassAuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginPassAuthRequest* internal_default_instance() {
    return reinterpret_cast<const LoginPassAuthRequest*>(
        &_LoginPassAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(LoginPassAuthRequest& a, LoginPassAuthRequest& b) { a.Swap(&b); }
  inline void Swap(LoginPassAuthRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginPassAuthRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginPassAuthRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LoginPassAuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginPassAuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginPassAuthRequest& from) { LoginPassAuthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LoginPassAuthRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.LoginPassAuthRequest"; }

 protected:
  explicit LoginPassAuthRequest(::google::protobuf::Arena* arena);
  LoginPassAuthRequest(::google::protobuf::Arena* arena, const LoginPassAuthRequest& from);
  LoginPassAuthRequest(::google::protobuf::Arena* arena, LoginPassAuthRequest&& from) noexcept
      : LoginPassAuthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1 [json_name = "login"];
  void clear_login() ;
  const std::string& login() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_login(Arg_&& arg, Args_... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* value);

  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(
      const std::string& value);
  std::string* _internal_mutable_login();

  public:
  // string password = 2 [json_name = "password"];
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.LoginPassAuthRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginPassAuthRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr login_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class LinkTelegramResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.LinkTelegramResponse) */ {
 public:
  inline LinkTelegramResponse() : LinkTelegramResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LinkTelegramResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LinkTelegramResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LinkTelegramResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LinkTelegramResponse(const LinkTelegramResponse& from) : LinkTelegramResponse(nullptr, from) {}
  inline LinkTelegramResponse(LinkTelegramResponse&& from) noexcept
      : LinkTelegramResponse(nullptr, std::move(from)) {}
  inline LinkTelegramResponse& operator=(const LinkTelegramResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkTelegramResponse& operator=(LinkTelegramResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkTelegramResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkTelegramResponse* internal_default_instance() {
    return reinterpret_cast<const LinkTelegramResponse*>(
        &_LinkTelegramResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LinkTelegramResponse& a, LinkTelegramResponse& b) { a.Swap(&b); }
  inline void Swap(LinkTelegramResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkTelegramResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkTelegramResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<LinkTelegramResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LinkTelegramResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LinkTelegramResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.LinkTelegramResponse"; }

 protected:
  explicit LinkTelegramResponse(::google::protobuf::Arena* arena);
  LinkTelegramResponse(::google::protobuf::Arena* arena, const LinkTelegramResponse& from);
  LinkTelegramResponse(::google::protobuf::Arena* arena, LinkTelegramResponse&& from) noexcept
      : LinkTelegramResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.LinkTelegramResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LinkTelegramResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};
// -------------------------------------------------------------------

class LinkTelegramRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:spielbrett.services.user.LinkTelegramRequest) */ {
 public:
  inline LinkTelegramRequest() : LinkTelegramRequest(nullptr) {}
  ~LinkTelegramRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LinkTelegramRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LinkTelegramRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LinkTelegramRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LinkTelegramRequest(const LinkTelegramRequest& from) : LinkTelegramRequest(nullptr, from) {}
  inline LinkTelegramRequest(LinkTelegramRequest&& from) noexcept
      : LinkTelegramRequest(nullptr, std::move(from)) {}
  inline LinkTelegramRequest& operator=(const LinkTelegramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkTelegramRequest& operator=(LinkTelegramRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkTelegramRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkTelegramRequest* internal_default_instance() {
    return reinterpret_cast<const LinkTelegramRequest*>(
        &_LinkTelegramRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LinkTelegramRequest& a, LinkTelegramRequest& b) { a.Swap(&b); }
  inline void Swap(LinkTelegramRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkTelegramRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkTelegramRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LinkTelegramRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinkTelegramRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LinkTelegramRequest& from) { LinkTelegramRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LinkTelegramRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "spielbrett.services.user.LinkTelegramRequest"; }

 protected:
  explicit LinkTelegramRequest(::google::protobuf::Arena* arena);
  LinkTelegramRequest(::google::protobuf::Arena* arena, const LinkTelegramRequest& from);
  LinkTelegramRequest(::google::protobuf::Arena* arena, LinkTelegramRequest&& from) noexcept
      : LinkTelegramRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kWebAppInitDataFieldNumber = 2,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string web_app_init_data = 2 [json_name = "webAppInitData"];
  void clear_web_app_init_data() ;
  const std::string& web_app_init_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_web_app_init_data(Arg_&& arg, Args_... args);
  std::string* mutable_web_app_init_data();
  PROTOBUF_NODISCARD std::string* release_web_app_init_data();
  void set_allocated_web_app_init_data(std::string* value);

  private:
  const std::string& _internal_web_app_init_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_web_app_init_data(
      const std::string& value);
  std::string* _internal_mutable_web_app_init_data();

  public:
  // @@protoc_insertion_point(class_scope:spielbrett.services.user.LinkTelegramRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LinkTelegramRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr web_app_init_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fservices_2fuser_2fuser_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegisterUserRequest

// string login = 1 [json_name = "login"];
inline void RegisterUserRequest::clear_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::login() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.RegisterUserRequest.login)
  return _internal_login();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterUserRequest::set_login(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.RegisterUserRequest.login)
}
inline std::string* RegisterUserRequest::mutable_login() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.RegisterUserRequest.login)
  return _s;
}
inline const std::string& RegisterUserRequest::_internal_login() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_.Get();
}
inline void RegisterUserRequest::_internal_set_login(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.Set(value, GetArena());
}
inline std::string* RegisterUserRequest::_internal_mutable_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.login_.Mutable( GetArena());
}
inline std::string* RegisterUserRequest::release_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.RegisterUserRequest.login)
  return _impl_.login_.Release();
}
inline void RegisterUserRequest::set_allocated_login(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.RegisterUserRequest.login)
}

// string password = 2 [json_name = "password"];
inline void RegisterUserRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.RegisterUserRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterUserRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.RegisterUserRequest.password)
}
inline std::string* RegisterUserRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.RegisterUserRequest.password)
  return _s;
}
inline const std::string& RegisterUserRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void RegisterUserRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* RegisterUserRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* RegisterUserRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.RegisterUserRequest.password)
  return _impl_.password_.Release();
}
inline void RegisterUserRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.RegisterUserRequest.password)
}

// -------------------------------------------------------------------

// RegisterUserResponse

// -------------------------------------------------------------------

// LinkTelegramRequest

// string session_id = 1 [json_name = "sessionId"];
inline void LinkTelegramRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& LinkTelegramRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.LinkTelegramRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinkTelegramRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.LinkTelegramRequest.session_id)
}
inline std::string* LinkTelegramRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.LinkTelegramRequest.session_id)
  return _s;
}
inline const std::string& LinkTelegramRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void LinkTelegramRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* LinkTelegramRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* LinkTelegramRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.LinkTelegramRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void LinkTelegramRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.LinkTelegramRequest.session_id)
}

// string web_app_init_data = 2 [json_name = "webAppInitData"];
inline void LinkTelegramRequest::clear_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.ClearToEmpty();
}
inline const std::string& LinkTelegramRequest::web_app_init_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.LinkTelegramRequest.web_app_init_data)
  return _internal_web_app_init_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinkTelegramRequest::set_web_app_init_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.LinkTelegramRequest.web_app_init_data)
}
inline std::string* LinkTelegramRequest::mutable_web_app_init_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_web_app_init_data();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.LinkTelegramRequest.web_app_init_data)
  return _s;
}
inline const std::string& LinkTelegramRequest::_internal_web_app_init_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.web_app_init_data_.Get();
}
inline void LinkTelegramRequest::_internal_set_web_app_init_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.Set(value, GetArena());
}
inline std::string* LinkTelegramRequest::_internal_mutable_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.web_app_init_data_.Mutable( GetArena());
}
inline std::string* LinkTelegramRequest::release_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.LinkTelegramRequest.web_app_init_data)
  return _impl_.web_app_init_data_.Release();
}
inline void LinkTelegramRequest::set_allocated_web_app_init_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.web_app_init_data_.IsDefault()) {
    _impl_.web_app_init_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.LinkTelegramRequest.web_app_init_data)
}

// -------------------------------------------------------------------

// LinkTelegramResponse

// -------------------------------------------------------------------

// LoginPassAuthRequest

// string login = 1 [json_name = "login"];
inline void LoginPassAuthRequest::clear_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.ClearToEmpty();
}
inline const std::string& LoginPassAuthRequest::login() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.LoginPassAuthRequest.login)
  return _internal_login();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginPassAuthRequest::set_login(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.LoginPassAuthRequest.login)
}
inline std::string* LoginPassAuthRequest::mutable_login() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.LoginPassAuthRequest.login)
  return _s;
}
inline const std::string& LoginPassAuthRequest::_internal_login() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.login_.Get();
}
inline void LoginPassAuthRequest::_internal_set_login(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.Set(value, GetArena());
}
inline std::string* LoginPassAuthRequest::_internal_mutable_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.login_.Mutable( GetArena());
}
inline std::string* LoginPassAuthRequest::release_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.LoginPassAuthRequest.login)
  return _impl_.login_.Release();
}
inline void LoginPassAuthRequest::set_allocated_login(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.login_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.LoginPassAuthRequest.login)
}

// string password = 2 [json_name = "password"];
inline void LoginPassAuthRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginPassAuthRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.LoginPassAuthRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginPassAuthRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.LoginPassAuthRequest.password)
}
inline std::string* LoginPassAuthRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.LoginPassAuthRequest.password)
  return _s;
}
inline const std::string& LoginPassAuthRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void LoginPassAuthRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* LoginPassAuthRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* LoginPassAuthRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.LoginPassAuthRequest.password)
  return _impl_.password_.Release();
}
inline void LoginPassAuthRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.LoginPassAuthRequest.password)
}

// -------------------------------------------------------------------

// LoginPassAuthResponse

// string session_id = 1 [json_name = "sessionId"];
inline void LoginPassAuthResponse::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& LoginPassAuthResponse::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.LoginPassAuthResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginPassAuthResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.LoginPassAuthResponse.session_id)
}
inline std::string* LoginPassAuthResponse::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.LoginPassAuthResponse.session_id)
  return _s;
}
inline const std::string& LoginPassAuthResponse::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void LoginPassAuthResponse::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* LoginPassAuthResponse::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* LoginPassAuthResponse::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.LoginPassAuthResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void LoginPassAuthResponse::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.LoginPassAuthResponse.session_id)
}

// -------------------------------------------------------------------

// TelegramAuthRequest

// string web_app_init_data = 1 [json_name = "webAppInitData"];
inline void TelegramAuthRequest::clear_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.ClearToEmpty();
}
inline const std::string& TelegramAuthRequest::web_app_init_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.TelegramAuthRequest.web_app_init_data)
  return _internal_web_app_init_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TelegramAuthRequest::set_web_app_init_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.TelegramAuthRequest.web_app_init_data)
}
inline std::string* TelegramAuthRequest::mutable_web_app_init_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_web_app_init_data();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.TelegramAuthRequest.web_app_init_data)
  return _s;
}
inline const std::string& TelegramAuthRequest::_internal_web_app_init_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.web_app_init_data_.Get();
}
inline void TelegramAuthRequest::_internal_set_web_app_init_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.Set(value, GetArena());
}
inline std::string* TelegramAuthRequest::_internal_mutable_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.web_app_init_data_.Mutable( GetArena());
}
inline std::string* TelegramAuthRequest::release_web_app_init_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.TelegramAuthRequest.web_app_init_data)
  return _impl_.web_app_init_data_.Release();
}
inline void TelegramAuthRequest::set_allocated_web_app_init_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.web_app_init_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.web_app_init_data_.IsDefault()) {
    _impl_.web_app_init_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.TelegramAuthRequest.web_app_init_data)
}

// -------------------------------------------------------------------

// TelegramAuthResponse

// string session_id = 1 [json_name = "sessionId"];
inline void TelegramAuthResponse::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& TelegramAuthResponse::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:spielbrett.services.user.TelegramAuthResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TelegramAuthResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:spielbrett.services.user.TelegramAuthResponse.session_id)
}
inline std::string* TelegramAuthResponse::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:spielbrett.services.user.TelegramAuthResponse.session_id)
  return _s;
}
inline const std::string& TelegramAuthResponse::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void TelegramAuthResponse::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* TelegramAuthResponse::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* TelegramAuthResponse::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:spielbrett.services.user.TelegramAuthResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void TelegramAuthResponse::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:spielbrett.services.user.TelegramAuthResponse.session_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace user
}  // namespace services
}  // namespace spielbrett


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fservices_2fuser_2fuser_2eproto_2epb_2eh
